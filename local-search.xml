<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>自定义注解处理器</title>
    <link href="/2020/01/21/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86%E5%99%A8/"/>
    <url>/2020/01/21/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E5%A4%84%E7%90%86%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>在android-studio中创建java jar module。为什么要创建java lib module？因为在java中才能找到AbstractProcessor这个类。</p><p>一个是lib_annotation，存放自定义的注解类。</p><p>一个是lib_compiler，用于处理自定义注解。添加依赖包</p><pre><code class="lang-groovy">    annotationProcessor &#39;com.google.auto.service:auto-service:1.0-rc2&#39;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>注解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>注解和反射基础.md</title>
    <link href="/2020/01/21/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/01/21/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><h2 id="反射类型Type"><a href="#反射类型Type" class="headerlink" title="反射类型Type"></a>反射类型Type</h2><p><code>Type</code>是个顶层接口类，它有几个子类和子接口。</p><h3 id="Class-lt-gt"><a href="#Class-lt-gt" class="headerlink" title="Class&lt;?&gt;"></a>Class&lt;?&gt;</h3><h3 id="TypeVariable-lt-D-extends-GenericDeclaration-gt"><a href="#TypeVariable-lt-D-extends-GenericDeclaration-gt" class="headerlink" title="TypeVariable&lt;D extends GenericDeclaration&gt;"></a>TypeVariable&lt;D extends GenericDeclaration&gt;</h3><p><code>TypeVariable</code>表示的是泛型类型<code>T</code>。</p><p><code>GenericDeclaration</code>表明泛型声明在哪里。泛型的声明一般在以下几个地方：</p><h4 id="类上声明泛型"><a href="#类上声明泛型" class="headerlink" title="类上声明泛型"></a>类上声明泛型</h4><pre><code class="lang-java">//在类上声明泛型Tclass Student&lt;T&gt; {}</code></pre><h4 id="方法上声明泛型"><a href="#方法上声明泛型" class="headerlink" title="方法上声明泛型"></a>方法上声明泛型</h4><pre><code class="lang-java">//方法上声明泛型Tpublic &lt;T extends Student&gt; T get(){    return null;}Method method = clazz.getMethod(&quot;get&quot;);Type type = method.getGenericReturnType();//因为方法get的返回类型是泛型类型T，所以type的实际类型是TypeVariable,又因为这个泛型类型T是在方法上声明的TypeVariable&lt;Method&gt; typeVariable = (TypeVariable&lt;Method&gt;)type;</code></pre><h4 id="构造函数声明泛型"><a href="#构造函数声明泛型" class="headerlink" title="构造函数声明泛型"></a>构造函数声明泛型</h4><pre><code class="lang-java">//构造函数声明泛型public &lt;T&gt; Student(T t){}//获取泛型类型T//因为构造函数的参数类型是泛型类型T，所以这里传入ObjectConstructor&lt;Student&gt; constructor = Student.class.getConstructor(Object.class);//返回构造函数上声明的泛型类型T的数组        TypeVariable&lt;Constructor&lt;Student&gt;&gt;[] typeParameters = constructor.getTypeParameters();</code></pre><blockquote><p><code>Constructor</code>和<code>Method</code>从<code>Executable</code>继承了方法<code>getTypeParameters()</code>。</p><pre><code class="lang-java">//返回方法上声明的泛型类型T的数组。TypeVariable&lt;Method&gt;[] typeParameters = method.getTypeParameters();</code></pre></blockquote><h3 id="WildcardType"><a href="#WildcardType" class="headerlink" title="WildcardType"></a>WildcardType</h3><p>泛型通配符<code>?</code></p><h3 id="GenericArrayType"><a href="#GenericArrayType" class="headerlink" title="GenericArrayType"></a>GenericArrayType</h3><h3 id="ParameterizedType"><a href="#ParameterizedType" class="headerlink" title="ParameterizedType"></a>ParameterizedType</h3><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><p>getDeclaredMethods(): 返回类自身的方法，包含public，protected，default和private。不包含继承来的方法。</p><p>包含重写父类或者父接口的方法。</p><p>getMethods():返回所有public的方法，包含自身和继承自父类和父接口的。</p><pre><code class="lang-java">Method method = clazz.getMethod(String methodName,Class&lt;?&gt;... parameterTypes)</code></pre><p><strong>如果方法参数中包含泛型参数T,那么parameterTypes对应应当传入Object.class。如果泛型参数T有明确的父类型（也就是说其父类型不是泛型类型），那么应当传入父类型</strong></p><pre><code class="lang-java">public &lt;T&gt; void get1(T t,String name){}public &lt;T extends People&gt; void get2(T t,String name){}public &lt;D,T extends D&gt; void get3(T t,String name){}//T是泛型类型，这里要传入ObjectMethod methodGet1 = clazz.getMethod(&quot;get1&quot;,Object.class,String.class);//T的父类型是People，这里要传入PeopleMethod methodGet2 = clazz.getMethod(&quot;get2&quot;,People.class,String.class);//T的父类型仍然是泛型D，这里要传入ObjectMethod methodGet3 = clazz.getMethod(&quot;get3&quot;,Object.class,String.class);</code></pre><h3 id="方法返回值类型"><a href="#方法返回值类型" class="headerlink" title="方法返回值类型"></a>方法返回值类型</h3><p>getGenericReturnType(): 返回方法返回值的实际类型。如果返回值类型为泛型T，就返回T。</p><p>getReturnType()：返回方法返回值的类型。如果返回值类型为泛型T，返回java.lang.Object。</p><pre><code class="lang-java">public &lt;T&gt; T get(T t){    return t;}Method method;Type type = method.getGenericReturnType();//TClass&lt;?&gt; classType = method.getReturnType();//java.lang.Object</code></pre><h3 id="方法参数"><a href="#方法参数" class="headerlink" title="方法参数"></a>方法参数</h3><pre><code class="lang-java">Method method;Parameter[] parameters = method.getParameters();</code></pre><h4 id="方法参数类型"><a href="#方法参数类型" class="headerlink" title="方法参数类型"></a>方法参数类型</h4><pre><code class="lang-java">public &lt;T&gt; T get(T t,String name){    return t;} Type[] genericParameterTypes = method.getGenericParameterTypes();//T,java.lang.String Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();//java.lang.Object,java.lang.String</code></pre><h4 id="方法参数注解"><a href="#方法参数注解" class="headerlink" title="方法参数注解"></a>方法参数注解</h4><pre><code></code></pre><blockquote><p>getGenericXXX()方法返回的是实际类型，如果是泛型就返回泛型类型。而getXXX()，遇到泛型类型就返回java.lang.Object。</p><p>方法签名：方法的名字，方法的参数个数，参数类型，参数顺序。不包括方法返回值类型。</p></blockquote><h2 id="Field"><a href="#Field" class="headerlink" title="Field"></a>Field</h2><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><p>自定义的注解需要使用<code>@interface</code>声明。</p><pre><code class="lang-java">@Retention(RetentionPolicy.RUNTIME)@Target({ElementType.METHOD,ElementType.PARAMETER})public @interface NotNull {  //定义属性value，default添加默认的属性值    boolean value() default false;}</code></pre><h2 id="Retention"><a href="#Retention" class="headerlink" title="Retention"></a>Retention</h2><p><code>Retention</code>表明这个注解可以保留多久。一共有三种情况：</p><ol><li><code>RetentionPolicy.SOURCE</code><br>编译器不会处理。</li><li>,<code>RetentionPolicy.CLASS</code>,<br>默认行为。会被编译器保留在字节码中，但不会被虚拟机保留在运行期。</li><li><code>RetentionPolicy.RUMTIME</code><br>被编译器保留在字节码中，被虚拟机保留在运行期。<strong>因此可以被反射读取到。如果需要读取自定义注解，需要给自定义注解设置这个保留期。</strong></li></ol><h2 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h2><p>注解可以适用于的场景。比如为类添加注解，为方法添加注解等。在<code>ElementType</code>中定义。</p><ol><li><code>TYPE</code><br>适用于类，接口(包括注解类)，枚举类。</li><li><code>FIELD</code><br>适用于成员变量。</li><li><code>METHOD</code><br>适用于方法。</li><li><code>PARAMETER</code><br>适用于方法参数。</li><li><code>CONSTRUCTOR</code><br>适用于构造函数。</li><li><code>LOCAL_VARIABLE</code><br>适用于局部变量</li><li><code>ANNOTATION_TYPE</code><br>适用于注解类型。</li><li><code>PACKAGE</code><br>在包上声明</li><li><code>TYPE_PARAMETER</code>和<code>TYPE_USE</code><br>从java8开始，暂时没用过。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>注解</tag>
      
      <tag>泛型</tag>
      
      <tag>反射</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>android权限处理</title>
    <link href="/2020/01/20/android%E6%9D%83%E9%99%90%E5%A4%84%E7%90%86/"/>
    <url>/2020/01/20/android%E6%9D%83%E9%99%90%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>android屏幕适配.md</title>
    <link href="/2020/01/20/android%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D/"/>
    <url>/2020/01/20/android%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h1><h2 id="屏幕尺寸"><a href="#屏幕尺寸" class="headerlink" title="屏幕尺寸"></a>屏幕尺寸</h2><p>屏幕对角线长度。单位英寸。1英寸≈2.54㎝。</p><h2 id="屏幕分辨率"><a href="#屏幕分辨率" class="headerlink" title="屏幕分辨率"></a>屏幕分辨率</h2><p>屏幕横纵方向上的像素点数，单位是px。1px = 1个像素点数。如1920*1080。</p><h2 id="屏幕像素密度"><a href="#屏幕像素密度" class="headerlink" title="屏幕像素密度"></a>屏幕像素密度</h2><p>每英寸上的像素点数，单位是dpi。即dot per inch。屏幕像素密度与屏幕尺寸和分辨率有关。</p><script type="math/tex; mode=display">像素密度 = \sqrt{ width^{2} + height^{2} } / 屏幕尺寸</script><h2 id="区分dpi和dip"><a href="#区分dpi和dip" class="headerlink" title="区分dpi和dip"></a>区分dpi和dip</h2><p>dpi是像素密度，全称是dot per inch。dip是密度无关像素，全称是density independence pixels。</p><h2 id="dip-dpi与px的转换"><a href="#dip-dpi与px的转换" class="headerlink" title="dip,dpi与px的转换"></a>dip,dpi与px的转换</h2><script type="math/tex; mode=display">px = dip * (dpi / 160)</script><p>比如：1dip在160dpi的屏幕上显示为1px，在320dpi的屏幕上显示为2px。</p><h1 id="屏幕适配"><a href="#屏幕适配" class="headerlink" title="屏幕适配"></a>屏幕适配</h1><h2 id="为什么要屏幕适配？"><a href="#为什么要屏幕适配？" class="headerlink" title="为什么要屏幕适配？"></a>为什么要屏幕适配？</h2><p>在不同尺寸的设备上，ui控件尺寸显示不一。比如：同样是5.0英寸的屏幕，在320dpi的屏幕上显示32px,在480dpi的屏幕上就显示为48px。前者看起来就会比后者尺寸大。</p><h2 id="适配后的效果"><a href="#适配后的效果" class="headerlink" title="适配后的效果"></a>适配后的效果</h2><p>ui控件在不同设备上显示的尺寸与屏幕的比例保持一致。</p><h2 id="如何适配"><a href="#如何适配" class="headerlink" title="如何适配"></a>如何适配</h2><p>这里使用的是开源框架<a href="https://github.com/JessYanCoding/AndroidAutoSize" target="_blank" rel="noopener">AndroidAutoSize</a>。</p><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><pre><code class="lang-groovy">implementation &#39;me.jessyan:autosize:0.9.5&#39;</code></pre><h3 id="配置AndroidManifest-xml"><a href="#配置AndroidManifest-xml" class="headerlink" title="配置AndroidManifest.xml"></a>配置AndroidManifest.xml</h3><pre><code class="lang-xml">&lt;!-- 以宽或者高为基准，配置其一即可 --&gt;&lt;meta-data android:name=&quot;design_width_in_dp&quot;                 android:value=&quot;360&quot;/&gt;      &lt;meta-data android:name=&quot;design_height_in_dp&quot;                 android:value=&quot;640&quot;/&gt;</code></pre><p>如何去确定宽或者高的基准值？</p><p>在蓝湖中查看</p><p><img src="/img/lanhu_pixles.png" srcset="/img/loading.gif" alt="尺寸设置"></p><h3 id="框架原理"><a href="#框架原理" class="headerlink" title="框架原理"></a>框架原理</h3><p>源码中定义了<code>InitProvider</code>，继承自<code>ContentProvider</code>。并在<code>AndroidManifest.xml</code>中声明了<code>InitProvider</code>。</p><p>App启动时，会自动加载<code>InitProvider</code>。其<code>onCreate</code>方法就会被调用。</p><pre><code class="lang-java">@Override    public boolean onCreate() {        AutoSizeConfig.getInstance()                .setLog(true)                .init((Application) getContext().getApplicationContext())                .setUseDeviceSize(false);        return true;    }</code></pre><p><code>AutoSizeConfig</code>的<code>init</code>方法被调用。</p><pre><code class="lang-java">AutoSizeConfig init(final Application application, boolean isBaseOnWidth, AutoAdaptStrategy strategy) {       //省略不必要的代码。。。        final DisplayMetrics displayMetrics = Resources.getSystem().getDisplayMetrics();                //读取清单中配置的设计图的尺寸        getMetaData(application);              //通过WindowManager获取宽高        int[] screenSize = ScreenUtils.getScreenSize(application);        mScreenWidth = screenSize[0];        mScreenHeight = screenSize[1];                //和屏幕尺寸相关的初始值        mInitDensity = displayMetrics.density;        mInitDensityDpi = displayMetrics.densityDpi;        mInitScaledDensity = displayMetrics.scaledDensity;        mInitXdpi = displayMetrics.xdpi;        application.registerComponentCallbacks(new ComponentCallbacks() {            @Override            public void onConfigurationChanged(Configuration newConfig) {                if (newConfig != null) {                                     int[] screenSize = ScreenUtils.getScreenSize(application);                    mScreenWidth = screenSize[0];                    mScreenHeight = screenSize[1];                }            }            @Override            public void onLowMemory() {            }        });        mActivityLifecycleCallbacks = new ActivityLifecycleCallbacksImpl(strategy == null ? new DefaultAutoAdaptStrategy() : strategy);          //注册生命周期回调        application.registerActivityLifecycleCallbacks(mActivityLifecycleCallbacks);        return this;    }</code></pre><p><code>AutoSizeConfig</code>主要职责：</p><ol><li><p>获取和屏幕尺寸相关的属性值</p><pre><code class="lang-java"> /**     * 最初的 {@link DisplayMetrics#density}     */    private float mInitDensity = -1;    /**     * 最初的 {@link DisplayMetrics#densityDpi}     */    private int mInitDensityDpi;    /**     * 最初的 {@link DisplayMetrics#scaledDensity}     */    private float mInitScaledDensity;    /**     * 最初的 {@link DisplayMetrics#xdpi}     */    private float mInitXdpi;    /**     * 设计图上的总宽度, 单位 dp     */    private int mDesignWidthInDp;    //设计图上的总高度, 单位 dp         private int mDesignHeightInDp;    /**     * 设备的屏幕总宽度, 单位 px     */    private int mScreenWidth;    /**     * 设备的屏幕总高度, 单位 px, 如果 {@link #isUseDeviceSize} 为 {@code false}, 屏幕总高度会减去状态栏的高度     * 如果有导航栏也会减去导航栏的高度     */    private int mScreenHeight;</code></pre></li></ol><ol><li><p>全局配置属性</p><pre><code class="lang-java">//是否全局按照宽度进行等比例适配。true：以宽度适配，false：以高度适配public AutoSizeConfig setBaseOnWidth(boolean baseOnWidth) ;//是否使用设备的实际尺寸做适配//useDeviceSize {@code true} 为使用设备的实际尺寸 (包含状态栏, 导航栏), {@code false} 为不使用 (不包含状态栏, 导航栏)public AutoSizeConfig setUseDeviceSize(boolean useDeviceSize);//设置屏幕适配逻辑策略类public AutoSizeConfig setAutoAdaptStrategy(AutoAdaptStrategy autoAdaptStrategy);</code></pre></li></ol><p>源码中有这样一个类<code>ActivityLifecycleCallbacksImpl</code>。这是<code>ActivityLifecycleCallbacks</code>的实现类。在<code>AutoSizeConfig</code>的<code>init</code>方法中注册了这个类。</p><p>屏幕适配的具体业务逻辑就在类<code>ActivityLifecycleCallbacksImpl</code>的方法<code>onActivityCreated</code>中通过<code>AutoAdaptStrategy</code>完成的。</p><pre><code class="lang-java">@Override    public void onActivityCreated(Activity activity, Bundle savedInstanceState) {      //...        if (mAutoAdaptStrategy != null) {            mAutoAdaptStrategy.applyAdapt(activity, activity);        }    }</code></pre><pre><code class="lang-java"> //DefaultAutoAdaptStrategy@Override    public void applyAdapt(Object target, Activity activity) {        //如果 target 实现 CustomAdapt 接口表示该 target 想自定义一些用于适配的参数, 从而改变最终的适配效果        if (target instanceof CustomAdapt) {                     AutoSize.autoConvertDensityOfCustomAdapt(activity, (CustomAdapt) target);        } else {                        AutoSize.autoConvertDensityOfGlobal(activity);        }    }</code></pre><p>最终是通过<code>AutoSize</code>完成修改<code>DisplayMetrics</code>。具体代码就不再贴出来了。</p><h1 id="几点总结"><a href="#几点总结" class="headerlink" title="几点总结"></a>几点总结</h1><p>使用<code>ConstraintLayout</code>能解决一些适配上的问题。</p><h2 id="高度适配"><a href="#高度适配" class="headerlink" title="高度适配"></a>高度适配</h2><h3 id="滑动布局"><a href="#滑动布局" class="headerlink" title="滑动布局"></a>滑动布局</h3><p>按照常规设置宽高属性即可。</p><h3 id="固定布局"><a href="#固定布局" class="headerlink" title="固定布局"></a>固定布局</h3><p>高度固定的布局(整个页面高度不超出当前屏幕高度)，在使用<code>ConstraintLayout</code>时，可以结合<code>layout_constraintHeight_percent</code>属性，设置布局高度相对于父布局的比例(数值在蓝湖设计图上有标注，windows下通过alt+鼠标左键查看，mac下通过option+鼠标左键查看)，同时<code>layout_height</code>要设置为<code>0dp</code>。</p><p>如果高度占满父布局，直接设置<code>top</code>和<code>bottom</code>和父布局约束关系，设置<code>layout_height</code>为<code>0dp</code>即可。</p><h2 id="宽度适配"><a href="#宽度适配" class="headerlink" title="宽度适配"></a>宽度适配</h2><p>如果宽度占满父布局，直接设置<code>left</code>和<code>right</code>和父布局约束关系，设置<code>layout_width</code>为<code>0dp</code>即可。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
