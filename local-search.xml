<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>应用内更新App</title>
    <link href="/2020/01/26/%E5%BA%94%E7%94%A8%E5%86%85%E6%9B%B4%E6%96%B0App/"/>
    <url>/2020/01/26/%E5%BA%94%E7%94%A8%E5%86%85%E6%9B%B4%E6%96%B0App/</url>
    
    <content type="html"><![CDATA[<p>需要三步：</p><ul><li>6.0 动态申请存储权限</li><li>7.0 通过<code>FileProvider</code>创建<code>uri</code></li><li>8.0 需要申请【安装未知来源应用权限】</li></ul><p>应用内更新<code>App</code>，在将下载的<code>App</code>保存到本地时，肯定要先处理申请存储权限。这里不提。</p><p>当安装App时，需要提供本地App的存储路径。在不同的<code>Android</code>版本上会有不同的提供方式。</p><h2 id="FileProvider"><a href="#FileProvider" class="headerlink" title="FileProvider"></a>FileProvider</h2><p><code>Android 7（API24）</code>开始使用<code>FileProvider</code>共享应用内的文件。向外界暴露一个安全的文件<code>Uri</code>(格式：”content:// “  代替以前的 “file://“)。</p><h3 id="声明FileProvider"><a href="#声明FileProvider" class="headerlink" title="声明FileProvider"></a>声明FileProvider</h3><p>在<code>AndroidManifest.xml</code>中声明一个<code>FileProvider</code>。</p><pre><code class="lang-xml"> &lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;        package=&quot;your app PackageName&quot;&gt;        &lt;application            ...&gt;            &lt;provider                android:name=&quot;android.support.v4.content.FileProvider&quot;                android:authorities=&quot;${your app PackageName}.fileprovider&quot;                android:grantUriPermissions=&quot;true&quot;                android:exported=&quot;false&quot;&gt;                &lt;meta-data                    android:name=&quot;android.support.FILE_PROVIDER_PATHS&quot;                    android:resource=&quot;@xml/filepaths&quot; /&gt;            &lt;/provider&gt;            ...        &lt;/application&gt;    &lt;/manifest&gt;</code></pre><p><code>android:exported=false</code>;不应该将<code>FileProvider</code>设置成<code>public</code>。</p><p><code>android:grantUriPermissions=true</code>;授予临时获取文件的权限。</p><p><code>&lt;meta-data&gt;</code>子元素指向一个<code>XML</code>文件，该文件指定您要共享的目录。<code>android:resource</code>属性是该文件的路径和名称，不包含 <code>.xml</code>扩展名。</p><h3 id="指定可共享的目录"><a href="#指定可共享的目录" class="headerlink" title="指定可共享的目录"></a>指定可共享的目录</h3><p>如何指定共享文件的路径？<strong>只能在res/xml目录下创建filepaths.xml文件来配置共享文件路径。</strong></p><pre><code class="lang-xml">&lt;paths&gt;  &lt;!-- 至少要包含以下一种 --&gt;  &lt;!-- Context.getFilesDir() --&gt;  &lt;files-path path=&quot;images/&quot; name=&quot;myimages&quot; /&gt;  &lt;!-- Context.getCacheDir() --&gt;  &lt;cache-path name=&quot;name&quot; path=&quot;path&quot; /&gt;  &lt;!-- Environment.getExternalStorageDirectory() --&gt;  &lt;external-path name=&quot;name&quot; path=&quot;path&quot; /&gt;  &lt;!-- Context.getExternalFilesDir(String)和Context.getExternalFilesDir(null) --&gt;  &lt;external-files-path name=&quot;name&quot; path=&quot;path&quot; /&gt;  &lt;!-- Context.getExternalCacheDir() --&gt;  &lt;external-cache-path name=&quot;name&quot; path=&quot;path&quot; /&gt;  &lt;!-- Context.getExternalMediaDirs()  API 21+  --&gt;  &lt;external-media-path name=&quot;name&quot; path=&quot;path&quot; /&gt;&lt;/paths&gt;</code></pre><pre><code class="lang-xml"> &lt;files-path path=&quot;images/&quot; name=&quot;myimages&quot; /&gt;</code></pre><p> <code>&lt;files-path&gt;</code>标记共享了应用内部存储的 <code>files/</code> 目录中的目录( <code>/data/user/0/com.ideal.file.study/files</code>   )。path 属性共享了 <code>files/</code>的<code>images/</code>子目录。<code>name</code> 属性指示 <code>FileProvider</code> 将路径段 <code>myimages</code> 添加到 <code>files/images/</code> 子目录中文件的内容 <code>URI</code>中。属于内部存储区域，通过<code>context.getFilesDir()</code>获取。</p><p>对上面的<code>name</code>和<code>path</code>做个解释。</p><pre><code class="lang-xml"> &lt;files-path        name=&quot;files&quot;        path=&quot;Download&quot;/&gt;    &lt;files-path        name=&quot;files&quot;        path=&quot;file&quot;/&gt;    &lt;files-path        name=&quot;file&quot;        path=&quot;file1&quot;/&gt;    &lt;files-path        name=&quot;f&quot;        path=&quot;file12&quot;/&gt;</code></pre><p>首先<code>files-path</code>指定的是<code>data/user/0/packagename/files</code>下的路径。<code>name</code>和<code>path</code>相当于我们常说的键值对<code>key-value</code>。因此<code>name</code>可以指定任意合法的值。<code>path</code>就是要创建的文件的子路径。也就是<code>data/user/0/packagename/files</code>的下一级路径。所以最终文件的路径就是<code>data/user/0/packagename/files/${path}/filename</code>。</p><p>在代码中要创建这个文件路径,使用的是<code>path</code>而不是<code>name</code>：</p><pre><code class="lang-kotlin">  val filePath = File(filesDir,&quot;${path}&quot;)</code></pre><h3 id="生成共享文件的URI"><a href="#生成共享文件的URI" class="headerlink" title="生成共享文件的URI"></a>生成共享文件的URI</h3><pre><code class="lang-kotlin">val uri : Uri = FilePRovider.getUriForFile(context,authorities,file)</code></pre><p>其中<code>authorities</code>就是我们在清单文件中声明的。</p><h3 id="授予临时权限"><a href="#授予临时权限" class="headerlink" title="授予临时权限"></a>授予临时权限</h3><p>安装App时，使用<code>FileProvider</code>需要授予临时权限。</p><pre><code class="lang-kotlin">intent.flags = Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION  //读的权限Intent.FLAG_GRANT_WRITE_URI_PERMISSION //写的权限Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION //与上面的两个权限组合使用Intent.FLAG_GRANT_PREFIX_URI_PERMISSION // 与前面两个组合使用</code></pre><h3 id="安装时申请未知来源权限-API26-android8-0"><a href="#安装时申请未知来源权限-API26-android8-0" class="headerlink" title="安装时申请未知来源权限(API26,android8.0)"></a>安装时申请未知来源权限(API26,android8.0)</h3><pre><code class="lang-kotlin">if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O){    //判断是否授予了允许安装未知来源App的权限  if (!packageManager.canRequestPackageInstalls()){        val packageUri = Uri.parse(&quot;package: $file-absolutePath&quot;)    val intent =  Intent(Settings.ACTION_MANAGE_UNKNOWN_APP_SOURCES,packageUri)    startActivityForResult(intent,requestCode)    }else {    installApk()  }}else {  installApk()}</code></pre><h2 id="安装Apk"><a href="#安装Apk" class="headerlink" title="安装Apk"></a>安装Apk</h2><pre><code class="lang-kotlin">fun installApk(){  //7.0开始使用FileProvider     if (Build.VERSION_CODES.N &lt;= Build.VERSION.SDK_INT){    val apkUri = FileProvider.getUriForFile(this,                        &quot;${application_id}.fileprovider&quot;, file)    intent.flags = Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION    intent.setDataAndType(apkUri, &quot;application/vnd.android.package-archive&quot;)  }else{    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    var apkUri = Uri.fromFile(file);    intent.setDataAndType(apkUri, &quot;application/vnd.android.package-archive&quot;);  }}</code></pre>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>FileProvider</tag>
      
      <tag>App更新</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java注解</title>
    <link href="/2020/01/23/java%E6%B3%A8%E8%A7%A3/"/>
    <url>/2020/01/23/java%E6%B3%A8%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><p>自定义的注解需要使用<code>@interface</code>声明。</p><pre><code class="lang-java">@Retention(RetentionPolicy.RUNTIME)@Target({ElementType.METHOD,ElementType.PARAMETER})public @interface NotNull {  //定义属性value，default添加默认的属性值    boolean value() default false;}</code></pre><h2 id="Retention"><a href="#Retention" class="headerlink" title="Retention"></a>Retention</h2><p><code>Retention</code>表明这个注解可以保留多久。一共有三种情况：</p><ol><li><code>RetentionPolicy.SOURCE</code><br>编译器不会处理。</li><li>,<code>RetentionPolicy.CLASS</code>,<br>默认行为。会被编译器保留在字节码中，但不会被虚拟机保留在运行期。</li><li><code>RetentionPolicy.RUMTIME</code><br>被编译器保留在字节码中，被虚拟机保留在运行期。<strong>因此可以被反射读取到。如果需要读取自定义注解，需要给自定义注解设置这个保留期。</strong></li></ol><h2 id="Target"><a href="#Target" class="headerlink" title="Target"></a>Target</h2><p>注解可以适用于的场景。比如为类添加注解，为方法添加注解等。在<code>ElementType</code>中定义。</p><ol><li><code>TYPE</code><br>适用于类，接口(包括注解类)，枚举类。</li><li><code>FIELD</code><br>适用于成员变量。</li><li><code>METHOD</code><br>适用于方法。</li><li><code>PARAMETER</code><br>适用于方法参数。</li><li><code>CONSTRUCTOR</code><br>适用于构造函数。</li><li><code>LOCAL_VARIABLE</code><br>适用于局部变量</li><li><code>ANNOTATION_TYPE</code><br>适用于注解类型。</li><li><code>PACKAGE</code><br>在包上声明</li><li><code>TYPE_PARAMETER</code>和<code>TYPE_USE</code><br>从java8开始，暂时没用过。</li></ol>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>注解</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反射之Type</title>
    <link href="/2020/01/23/%E5%8F%8D%E5%B0%84%E4%B9%8BType/"/>
    <url>/2020/01/23/%E5%8F%8D%E5%B0%84%E4%B9%8BType/</url>
    
    <content type="html"><![CDATA[<h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><p><code>Type</code>是个顶层接口类，它有几个子类和子接口。</p><div class="table-container"><table><thead><tr><th style="text-align:center">Type</th><th style="text-align:center">WildcardType</th><th style="text-align:center">ParameterizedType</th><th style="text-align:center">TypeVariable<D extends GenericDeclaration></th><th style="text-align:center">GenericArrayType</th><th style="text-align:center">Class&lt;?&gt;</th></tr></thead><tbody><tr><td style="text-align:center">getTypeName() : String</td><td style="text-align:center">getLowerBounds() : Type[]</td><td style="text-align:center">getActualTypeArguments() : Type[]</td><td style="text-align:center">getBounds() : Type[]</td><td style="text-align:center">getGenericComponentType() :Type</td><td style="text-align:center">isPrimitive() : boolean,isArray(),isInterface(), isInstance(Object),  isAnnotation(),  isSynthetic(),</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">getUpperBounds() : Type[]</td><td style="text-align:center">getRawType() : Type</td><td style="text-align:center">getGenericDeclaration() : D</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">getOwnerType() : Type</td><td style="text-align:center">getName() : String</td><td style="text-align:center"></td><td style="text-align:center">getTypeParameters(): TypeVariable<Class<T>&gt;[]</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">getAnnotatedBounds() : AnnotatedType[]</td><td style="text-align:center"></td></tr></tbody></table></div><h3 id="TypeVariable-lt-D-extends-GenericDeclaration-gt"><a href="#TypeVariable-lt-D-extends-GenericDeclaration-gt" class="headerlink" title="TypeVariable&lt;D extends GenericDeclaration&gt;"></a>TypeVariable&lt;D extends GenericDeclaration&gt;</h3><p><code>TypeVariable</code>表示的是泛型类型<code>T</code>。</p><p><code>GenericDeclaration</code>表明泛型声明在哪里。泛型的声明一般在以下几个地方：</p><h4 id="类上声明泛型"><a href="#类上声明泛型" class="headerlink" title="类上声明泛型"></a>类上声明泛型</h4><pre><code class="lang-java">//在类上声明泛型Tclass Student&lt;T&gt; {}//获取类上声明的泛型类型TTypeVariable&lt;Class&lt;Student&gt;&gt;[] typeParameters = Student.class.getTypeParameters();</code></pre><h4 id="方法上声明泛型"><a href="#方法上声明泛型" class="headerlink" title="方法上声明泛型"></a>方法上声明泛型</h4><pre><code class="lang-java">//方法上声明泛型Tpublic &lt;T extends Student&gt; T get(){    return null;}Method method = clazz.getMethod(&quot;get&quot;);Type type = method.getGenericReturnType();//因为方法get的返回类型是泛型类型T，所以type的实际类型是TypeVariable,又因为这个泛型类型T是在方法上声明的TypeVariable&lt;Method&gt; typeVariable = (TypeVariable&lt;Method&gt;)type;</code></pre><h4 id="构造函数声明泛型"><a href="#构造函数声明泛型" class="headerlink" title="构造函数声明泛型"></a>构造函数声明泛型</h4><pre><code class="lang-java">//构造函数声明泛型public &lt;T&gt; Student(T t){}//获取泛型类型T//因为构造函数的参数类型是泛型类型T，所以这里传入ObjectConstructor&lt;Student&gt; constructor = Student.class.getConstructor(Object.class);//返回构造函数上声明的泛型类型T的数组        TypeVariable&lt;Constructor&lt;Student&gt;&gt;[] typeParameters = constructor.getTypeParameters();</code></pre><blockquote><p><code>Constructor</code>和<code>Method</code>从<code>Executable</code>继承了方法<code>getTypeParameters()</code>。</p><pre><code class="lang-java">//返回方法上声明的泛型类型T的数组。TypeVariable&lt;Method&gt;[] typeParameters = method.getTypeParameters();</code></pre></blockquote><h3 id="WildcardType"><a href="#WildcardType" class="headerlink" title="WildcardType"></a>WildcardType</h3><p>泛型通配符<code>?</code>, <code>&lt;? extends Number&gt;</code>等。</p><h3 id="ParameterizedType"><a href="#ParameterizedType" class="headerlink" title="ParameterizedType"></a>ParameterizedType</h3><p>​    官方解释<code>ParameterizedType represents a parameterized type such as Collection&lt;String&gt;</code></p><p>不明白为什么用的是<code>Parameterized</code>这个单词。字面意思理解为参数化的类型。很难懂到底是啥。自己的话来说就是这个类型所使用的类一定要带有泛型。</p><p>比如方法返回值类型。</p><pre><code class="lang-java">public List&lt;String&gt; get(){    return null;}</code></pre><p><code>get</code>方法返回值为<code>List&lt;String&gt;</code>。<code>List</code>带了泛型。也就是类型所使用的的任何类只要带了泛型，它的类型都是<code>ParameterizedType</code>。</p><h3 id="GenericArrayType"><a href="#GenericArrayType" class="headerlink" title="GenericArrayType"></a>GenericArrayType</h3><p>字面意思就能看出这个类型表示的是个数组。数组元素是什么类型呢？官方文档做了说明。</p><p><code>{@code GenericArrayType} represents an array type whose component type is either a parameterized type or a type variable.</code></p><p>数组元素类型有两种：</p><ol><li>数组元素类型是<code>ParameterizedType</code>。<br>比如：<code>List&lt;String&gt;[]</code>,数组元素类型是<code>List&lt;String&gt;</code>。</li><li>数组元素类型是泛型类型T，也就是<code>TypeVariable</code>类型。<br>比如：T[]。数组元素类型是泛型类型T。</li></ol><p>对于数组元素类型为具体类型的比如基本变量类型<code>int[]</code>，明确的对象类型<code>Student[]</code>和<code>System[]</code>(自定义的对象类Student，系统的类System)，这些元素类型既不是<code>ParameterizedType</code>，又不是<code>TypeVariable</code>，因此它的类型是<code>Class&lt;?&gt;</code></p><h3 id="Class-lt-gt"><a href="#Class-lt-gt" class="headerlink" title="Class&lt;?&gt;"></a>Class&lt;?&gt;</h3><p>基本变量，对象(自定义的类和接口，枚举类)，字符串<code>String</code>，以及以这些类型作为元素类型的数组。都是<code>Class&lt;?&gt;</code>。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>反射</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反射基础.md</title>
    <link href="/2020/01/21/%E5%8F%8D%E5%B0%84%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/01/21/%E5%8F%8D%E5%B0%84%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>首先需要获取到<code>Class</code>对象。</p><h2 id="获取Class对象"><a href="#获取Class对象" class="headerlink" title="获取Class对象"></a>获取Class对象</h2><p>有两种获取方式：</p><p>通过类，接口或者枚举类名去获取，基本变量类型也可以。</p><pre><code class="lang-java">Class&lt;Student&gt; clazz = Student.class;Class&lt;Integer&gt; intClazz = int.class;</code></pre><p>通过变量名去获取(变量的类型一定是对象类型，基本变量不可以)</p><pre><code class="lang-java">Student student;Class&lt;?&gt; clazz = student.getClass();</code></pre><h2 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h2><p><code>Class</code>中定义了多个获取<code>Constructor</code>的方法。</p><div class="table-container"><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">返回类型</th><th style="text-align:center">方法释义</th></tr></thead><tbody><tr><td style="text-align:center">getConstructor(Class&lt;?&gt;… parameterTypes)</td><td style="text-align:center">Constructor<T></td><td style="text-align:center">返回指定参数对应的构造函数（public权限的）</td></tr><tr><td style="text-align:center">getConstructors()</td><td style="text-align:center">Constructor&lt;?&gt;[]</td><td style="text-align:center">返回构造函数的数组  （public权限的）</td></tr><tr><td style="text-align:center">getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)</td><td style="text-align:center">Constructor<T></td><td style="text-align:center">返回指定参数对应的构造函数(包含public,private,protected,default权限的)</td></tr><tr><td style="text-align:center">getDeclaredConstructors()</td><td style="text-align:center">Constructor&lt;?&gt;[]</td><td style="text-align:center">返回构造函数的数组  （包含public,private,protected,default权限的）</td></tr></tbody></table></div><blockquote><p>构造函数的参数如果为基本类型，比如<code>int</code>，就直接传入<code>int.class</code>。</p></blockquote><h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><p><code>Class</code>定义了多个获取<code>Method</code>的方法。</p><div class="table-container"><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">返回类型</th><th style="text-align:center">方法释义</th></tr></thead><tbody><tr><td style="text-align:center">getMethods()</td><td style="text-align:center">Method[]</td><td style="text-align:center">public权限的方法，包含继承自父类(接口)的。</td></tr><tr><td style="text-align:center">getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes)</td><td style="text-align:center">Method</td><td style="text-align:center">获取自身方法名为name的方法，该方法可为protected,public,private,default权限。</td></tr><tr><td style="text-align:center">getDeclaredMethods()</td><td style="text-align:center">Method[]</td><td style="text-align:center">获取自身所有的方法，该方法可为protected,public,private,default权限。</td></tr><tr><td style="text-align:center">getEnclosingMethod</td><td style="text-align:center">Method</td><td style="text-align:center">方法返回的是个抽象类（接口）对象。比如方法内实例化了一个接口或者抽象类，并返回。</td></tr><tr><td style="text-align:center">getMethod(String name, Class&lt;?&gt;… parameterTypes)</td><td style="text-align:center">Method</td><td style="text-align:center">获取自身方法名为name的public权限的方法</td></tr></tbody></table></div><pre><code class="lang-java">Method method = clazz.getMethod(String methodName,Class&lt;?&gt;... parameterTypes)</code></pre><p><strong>如果方法参数中包含泛型参数T,那么parameterTypes对应应当传入Object.class。如果泛型参数T有明确的父类型（也就是说其父类型不是泛型类型），那么应当传入父类型</strong></p><pre><code class="lang-java">public &lt;T&gt; void get1(T t,String name){}public &lt;T extends People&gt; void get2(T t,String name){}public &lt;D,T extends D&gt; void get3(T t,String name){}//T是泛型类型，这里要传入ObjectMethod methodGet1 = clazz.getMethod(&quot;get1&quot;,Object.class,String.class);//T的父类型是People，这里要传入PeopleMethod methodGet2 = clazz.getMethod(&quot;get2&quot;,People.class,String.class);//T的父类型仍然是泛型D，这里要传入ObjectMethod methodGet3 = clazz.getMethod(&quot;get3&quot;,Object.class,String.class);</code></pre><h3 id="方法返回值类型"><a href="#方法返回值类型" class="headerlink" title="方法返回值类型"></a>方法返回值类型</h3><div class="table-container"><table><thead><tr><th style="text-align:center">方法</th><th style="text-align:center">返回值类型</th><th style="text-align:center">方法释义</th></tr></thead><tbody><tr><td style="text-align:center">getReturnType</td><td style="text-align:center">Class&lt;?&gt;</td><td style="text-align:center">方法返回值的Class类型对象，如果返回值为泛型T，就返回Object。</td></tr><tr><td style="text-align:center">getGenericReturnType</td><td style="text-align:center">Type</td><td style="text-align:center">方法返回值的Type类型对象，如果返回值为泛型T，就返回T。</td></tr><tr><td style="text-align:center">getTypeParameters</td><td style="text-align:center">TypeVariable       &lt;Method&gt;[]</td><td style="text-align:center">方法上声明的泛型类型。比如：T</td></tr></tbody></table></div><pre><code class="lang-java">public &lt;T&gt; T get(T t){    return t;}Method method;Type type = method.getGenericReturnType();//T  --&gt; TypeVariableClass&lt;?&gt; classType = method.getReturnType();//java.lang.ObjectTypeVariable&lt;Method&gt;[] typeParameters = method.getTypeParameters();</code></pre><h3 id="方法参数"><a href="#方法参数" class="headerlink" title="方法参数"></a>方法参数</h3><pre><code class="lang-java">Method method;Parameter[] parameters = method.getParameters();</code></pre><h4 id="方法参数类型"><a href="#方法参数类型" class="headerlink" title="方法参数类型"></a>方法参数类型</h4><pre><code class="lang-java">public &lt;T&gt; T get(T t,String name){    return t;} Type[] genericParameterTypes = method.getGenericParameterTypes();//T,java.lang.String Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();//java.lang.Object,java.lang.String</code></pre><h4 id="方法参数注解"><a href="#方法参数注解" class="headerlink" title="方法参数注解"></a>方法参数注解</h4><pre><code class="lang-java">//方法注解Annotation[][] parameterAnnotations = method.getParameterAnnotations();</code></pre><blockquote><p>方法签名：方法的名字，方法的参数个数，参数类型，参数顺序。不包括方法返回值类型。</p></blockquote><h2 id="Field"><a href="#Field" class="headerlink" title="Field"></a>Field</h2><h2 id="Parameter"><a href="#Parameter" class="headerlink" title="Parameter"></a>Parameter</h2><p><code>Field</code>和<code>Parameter</code>和上面的都差不多，暂时不列出了。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>反射</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>android屏幕适配.md</title>
    <link href="/2020/01/20/android%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D/"/>
    <url>/2020/01/20/android%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h1><h2 id="屏幕尺寸"><a href="#屏幕尺寸" class="headerlink" title="屏幕尺寸"></a>屏幕尺寸</h2><p>屏幕对角线长度。单位英寸。1英寸≈2.54㎝。</p><h2 id="屏幕分辨率"><a href="#屏幕分辨率" class="headerlink" title="屏幕分辨率"></a>屏幕分辨率</h2><p>屏幕横纵方向上的像素点数，单位是px。1px = 1个像素点数。如1920*1080。</p><h2 id="屏幕像素密度"><a href="#屏幕像素密度" class="headerlink" title="屏幕像素密度"></a>屏幕像素密度</h2><p>每英寸上的像素点数，单位是dpi。即dot per inch。屏幕像素密度与屏幕尺寸和分辨率有关。</p><script type="math/tex; mode=display">像素密度 = \sqrt{ width^{2} + height^{2} } / 屏幕尺寸</script><h2 id="区分dpi和dip"><a href="#区分dpi和dip" class="headerlink" title="区分dpi和dip"></a>区分dpi和dip</h2><p>dpi是像素密度，全称是dot per inch。dip是密度无关像素，全称是density independence pixels。</p><h2 id="dip-dpi与px的转换"><a href="#dip-dpi与px的转换" class="headerlink" title="dip,dpi与px的转换"></a>dip,dpi与px的转换</h2><script type="math/tex; mode=display">px = dip * (dpi / 160)</script><p>比如：1dip在160dpi的屏幕上显示为1px，在320dpi的屏幕上显示为2px。</p><h1 id="屏幕适配"><a href="#屏幕适配" class="headerlink" title="屏幕适配"></a>屏幕适配</h1><h2 id="为什么要屏幕适配？"><a href="#为什么要屏幕适配？" class="headerlink" title="为什么要屏幕适配？"></a>为什么要屏幕适配？</h2><p>在不同尺寸的设备上，ui控件尺寸显示不一。比如：同样是5.0英寸的屏幕，在320dpi的屏幕上显示32px,在480dpi的屏幕上就显示为48px。前者看起来就会比后者尺寸大。</p><h2 id="适配后的效果"><a href="#适配后的效果" class="headerlink" title="适配后的效果"></a>适配后的效果</h2><p>ui控件在不同设备上显示的尺寸与屏幕的比例保持一致。</p><h2 id="如何适配"><a href="#如何适配" class="headerlink" title="如何适配"></a>如何适配</h2><p>这里使用的是开源框架<a href="https://github.com/JessYanCoding/AndroidAutoSize" target="_blank" rel="noopener">AndroidAutoSize</a>。</p><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><pre><code class="lang-groovy">implementation &#39;me.jessyan:autosize:0.9.5&#39;</code></pre><h3 id="配置AndroidManifest-xml"><a href="#配置AndroidManifest-xml" class="headerlink" title="配置AndroidManifest.xml"></a>配置AndroidManifest.xml</h3><pre><code class="lang-xml">&lt;!-- 以宽或者高为基准，配置其一即可 --&gt;&lt;meta-data android:name=&quot;design_width_in_dp&quot;                 android:value=&quot;360&quot;/&gt;      &lt;meta-data android:name=&quot;design_height_in_dp&quot;                 android:value=&quot;640&quot;/&gt;</code></pre><p>如何去确定宽或者高的基准值？</p><p>在蓝湖中查看</p><p><img src="/img/lanhu_pixles.png" srcset="/img/loading.gif" alt="尺寸设置"></p><h3 id="框架原理"><a href="#框架原理" class="headerlink" title="框架原理"></a>框架原理</h3><p>源码中定义了<code>InitProvider</code>，继承自<code>ContentProvider</code>。并在<code>AndroidManifest.xml</code>中声明了<code>InitProvider</code>。</p><p>App启动时，会自动加载<code>InitProvider</code>。其<code>onCreate</code>方法就会被调用。</p><pre><code class="lang-java">@Override    public boolean onCreate() {        AutoSizeConfig.getInstance()                .setLog(true)                .init((Application) getContext().getApplicationContext())                .setUseDeviceSize(false);        return true;    }</code></pre><p><code>AutoSizeConfig</code>的<code>init</code>方法被调用。</p><pre><code class="lang-java">AutoSizeConfig init(final Application application, boolean isBaseOnWidth, AutoAdaptStrategy strategy) {       //省略不必要的代码。。。        final DisplayMetrics displayMetrics = Resources.getSystem().getDisplayMetrics();                //读取清单中配置的设计图的尺寸        getMetaData(application);              //通过WindowManager获取宽高        int[] screenSize = ScreenUtils.getScreenSize(application);        mScreenWidth = screenSize[0];        mScreenHeight = screenSize[1];                //和屏幕尺寸相关的初始值        mInitDensity = displayMetrics.density;        mInitDensityDpi = displayMetrics.densityDpi;        mInitScaledDensity = displayMetrics.scaledDensity;        mInitXdpi = displayMetrics.xdpi;        application.registerComponentCallbacks(new ComponentCallbacks() {            @Override            public void onConfigurationChanged(Configuration newConfig) {                if (newConfig != null) {                                     int[] screenSize = ScreenUtils.getScreenSize(application);                    mScreenWidth = screenSize[0];                    mScreenHeight = screenSize[1];                }            }            @Override            public void onLowMemory() {            }        });        mActivityLifecycleCallbacks = new ActivityLifecycleCallbacksImpl(strategy == null ? new DefaultAutoAdaptStrategy() : strategy);          //注册生命周期回调        application.registerActivityLifecycleCallbacks(mActivityLifecycleCallbacks);        return this;    }</code></pre><p><code>AutoSizeConfig</code>主要职责：</p><ol><li><p>获取和屏幕尺寸相关的属性值</p><pre><code class="lang-java"> /**     * 最初的 {@link DisplayMetrics#density}     */    private float mInitDensity = -1;    /**     * 最初的 {@link DisplayMetrics#densityDpi}     */    private int mInitDensityDpi;    /**     * 最初的 {@link DisplayMetrics#scaledDensity}     */    private float mInitScaledDensity;    /**     * 最初的 {@link DisplayMetrics#xdpi}     */    private float mInitXdpi;    /**     * 设计图上的总宽度, 单位 dp     */    private int mDesignWidthInDp;    //设计图上的总高度, 单位 dp         private int mDesignHeightInDp;    /**     * 设备的屏幕总宽度, 单位 px     */    private int mScreenWidth;    /**     * 设备的屏幕总高度, 单位 px, 如果 {@link #isUseDeviceSize} 为 {@code false}, 屏幕总高度会减去状态栏的高度     * 如果有导航栏也会减去导航栏的高度     */    private int mScreenHeight;</code></pre></li></ol><ol><li><p>全局配置属性</p><pre><code class="lang-java">//是否全局按照宽度进行等比例适配。true：以宽度适配，false：以高度适配public AutoSizeConfig setBaseOnWidth(boolean baseOnWidth) ;//是否使用设备的实际尺寸做适配//useDeviceSize {@code true} 为使用设备的实际尺寸 (包含状态栏, 导航栏), {@code false} 为不使用 (不包含状态栏, 导航栏)public AutoSizeConfig setUseDeviceSize(boolean useDeviceSize);//设置屏幕适配逻辑策略类public AutoSizeConfig setAutoAdaptStrategy(AutoAdaptStrategy autoAdaptStrategy);</code></pre></li></ol><p>源码中有这样一个类<code>ActivityLifecycleCallbacksImpl</code>。这是<code>ActivityLifecycleCallbacks</code>的实现类。在<code>AutoSizeConfig</code>的<code>init</code>方法中注册了这个类。</p><p>屏幕适配的具体业务逻辑就在类<code>ActivityLifecycleCallbacksImpl</code>的方法<code>onActivityCreated</code>中通过<code>AutoAdaptStrategy</code>完成的。</p><pre><code class="lang-java">@Override    public void onActivityCreated(Activity activity, Bundle savedInstanceState) {      //...        if (mAutoAdaptStrategy != null) {            mAutoAdaptStrategy.applyAdapt(activity, activity);        }    }</code></pre><pre><code class="lang-java"> //DefaultAutoAdaptStrategy@Override    public void applyAdapt(Object target, Activity activity) {        //如果 target 实现 CustomAdapt 接口表示该 target 想自定义一些用于适配的参数, 从而改变最终的适配效果        if (target instanceof CustomAdapt) {                     AutoSize.autoConvertDensityOfCustomAdapt(activity, (CustomAdapt) target);        } else {                        AutoSize.autoConvertDensityOfGlobal(activity);        }    }</code></pre><p>最终是通过<code>AutoSize</code>完成修改<code>DisplayMetrics</code>。具体代码就不再贴出来了。</p><h1 id="几点总结"><a href="#几点总结" class="headerlink" title="几点总结"></a>几点总结</h1><p>使用<code>ConstraintLayout</code>能解决一些适配上的问题。</p><h2 id="高度适配"><a href="#高度适配" class="headerlink" title="高度适配"></a>高度适配</h2><h3 id="滑动布局"><a href="#滑动布局" class="headerlink" title="滑动布局"></a>滑动布局</h3><p>按照常规设置宽高属性即可。</p><h3 id="固定布局"><a href="#固定布局" class="headerlink" title="固定布局"></a>固定布局</h3><p>高度固定的布局(整个页面高度不超出当前屏幕高度)，在使用<code>ConstraintLayout</code>时，可以结合<code>layout_constraintHeight_percent</code>属性，设置布局高度相对于父布局的比例(数值在蓝湖设计图上有标注，windows下通过alt+鼠标左键查看，mac下通过option+鼠标左键查看)，同时<code>layout_height</code>要设置为<code>0dp</code>。</p><p>如果高度占满父布局，直接设置<code>top</code>和<code>bottom</code>和父布局约束关系，设置<code>layout_height</code>为<code>0dp</code>即可。</p><h2 id="宽度适配"><a href="#宽度适配" class="headerlink" title="宽度适配"></a>宽度适配</h2><p>如果宽度占满父布局，直接设置<code>left</code>和<code>right</code>和父布局约束关系，设置<code>layout_width</code>为<code>0dp</code>即可。</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>屏幕适配</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
